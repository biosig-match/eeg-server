x-common-logging: &common-logging
  driver: json-file
  options:
    max-size: '10m'
    max-file: '3'

x-postgres-env: &postgres-env
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_HOST: ${POSTGRES_HOST}

x-rabbitmq-env: &rabbitmq-env
  RABBITMQ_USER: ${RABBITMQ_USER}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
  RABBITMQ_HOST: ${RABBITMQ_HOST}

x-minio-env: &minio-env
  MINIO_ENDPOINT: ${MINIO_ENDPOINT}
  MINIO_PORT: ${MINIO_PORT}
  MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
  MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
  MINIO_USE_SSL: ${MINIO_USE_SSL}

services:
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: eeg_rabbitmq
    ports:
      - '${RABBITMQ_MGMT_PORT}:15672'
      - '5672:5672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_running', '-q']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  db:
    image: timescale/timescaledb-ha:pg16-ts2.14
    container_name: eeg_db
    ports:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s

  minio:
    image: minio/minio
    container_name: eeg_minio
    ports:
      - '${MINIO_PORT}:9000'
      - '${MINIO_CONSOLE_PORT}:9001'
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  create-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
    entrypoint: >
      /bin/sh -c "
      set -ex;
      mc alias set local http://${MINIO_ENDPOINT}:${MINIO_PORT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      echo '✅ MinIO is ready. Alias set.';
      mc stat local/${MINIO_RAW_DATA_BUCKET} > /dev/null 2>&1 || mc mb local/${MINIO_RAW_DATA_BUCKET};
      mc stat local/${MINIO_MEDIA_BUCKET} > /dev/null 2>&1 || mc mb local/${MINIO_MEDIA_BUCKET};
      mc stat local/${MINIO_BIDS_EXPORTS_BUCKET} > /dev/null 2>&1 || mc mb local/${MINIO_BIDS_EXPORTS_BUCKET};
      echo '✅ Buckets are created.';
      "
    networks:
      - eeg-network

  collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: collector
    container_name: eeg_collector
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      <<: *rabbitmq-env
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging: *common-logging

  processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: processor
    container_name: eeg_processor
    restart: unless-stopped
    depends_on:
      create-buckets:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      <<: [*rabbitmq-env, *postgres-env, *minio-env]
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      MINIO_RAW_DATA_BUCKET: ${MINIO_RAW_DATA_BUCKET}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3010/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    logging: *common-logging

  media_processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: media_processor
    container_name: eeg_media_processor
    restart: unless-stopped
    depends_on:
      create-buckets:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      <<: [*rabbitmq-env, *postgres-env, *minio-env]
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      MINIO_MEDIA_BUCKET: ${MINIO_MEDIA_BUCKET}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3020/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    logging: *common-logging

  realtime_analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.python
      args:
        SERVICE_NAME: realtime_analyzer
    container_name: eeg_realtime_analyzer
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:5002 --workers 1 --log-level debug 'src.main:app'
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5002/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    logging: *common-logging

  ingress:
    build: ./nginx
    container_name: eeg_ingress
    restart: unless-stopped
    ports:
      - '0.0.0.0:${NGINX_PORT}:80'
    depends_on:
      collector:
        condition: service_started
      realtime_analyzer:
        condition: service_started
      session_manager:
        condition: service_started
      auth_manager:
        condition: service_started
      erp_neuro_marketing:
        condition: service_started
      bids_exporter:
        condition: service_started
    networks:
      - eeg-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging: *common-logging

  session_manager:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: session_manager
    container_name: eeg_session_manager
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth_manager:
        condition: service_started
    environment:
      <<: [*postgres-env, *rabbitmq-env, *minio-env]
      PORT: 3000
      MINIO_MEDIA_BUCKET: ${MINIO_MEDIA_BUCKET}
      DATA_LINKER_QUEUE: ${DATA_LINKER_QUEUE}
      STIMULUS_ASSET_QUEUE: ${STIMULUS_ASSET_QUEUE}
      AUTH_MANAGER_URL: ${AUTH_MANAGER_URL}
      # BIDS ExporterサービスのURLを環境変数として渡す
      BIDS_EXPORTER_URL: ${BIDS_EXPORTER_URL}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 384M
    logging: *common-logging

  stimulus_asset_processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: stimulus_asset_processor
    container_name: eeg_stimulus_asset_processor
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    environment:
      <<: [*postgres-env, *rabbitmq-env, *minio-env]
      MINIO_MEDIA_BUCKET: ${MINIO_MEDIA_BUCKET}
      STIMULUS_ASSET_QUEUE: ${STIMULUS_ASSET_QUEUE}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3050/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 384M
    logging: *common-logging

  auth_manager:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: auth_manager
    container_name: eeg_auth_manager
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: *postgres-env
      PORT: 3000
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    logging: *common-logging

  data_linker:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: data_linker
    container_name: eeg_data_linker
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      <<: [*postgres-env, *rabbitmq-env]
      DATA_LINKER_QUEUE: ${DATA_LINKER_QUEUE}
      EVENT_CORRECTION_QUEUE: ${EVENT_CORRECTION_QUEUE}
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3030/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 384M
    logging: *common-logging

  event_corrector:
    build:
      context: .
      dockerfile: docker/Dockerfile.bun
      args:
        SERVICE_NAME: event_corrector
    container_name: eeg_event_corrector
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    environment:
      <<: [*postgres-env, *rabbitmq-env, *minio-env]
      EVENT_CORRECTION_QUEUE: ${EVENT_CORRECTION_QUEUE}
      MINIO_RAW_DATA_BUCKET: ${MINIO_RAW_DATA_BUCKET}
      SAMPLE_RATE: 256
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3040/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 384M
    logging: *common-logging

  bids_exporter:
    build:
      context: .
      dockerfile: docker/Dockerfile.python
      args:
        SERVICE_NAME: bids_exporter
    container_name: eeg_bids_exporter
    restart: unless-stopped
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000
    volumes:
      - bids_exports_volume:/export_data
    depends_on:
      db:
        condition: service_healthy
      create-buckets:
        condition: service_completed_successfully
    environment:
      <<: [*postgres-env, *minio-env]
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}:${MINIO_PORT}
      MINIO_RAW_DATA_BUCKET: ${MINIO_RAW_DATA_BUCKET}
      MINIO_MEDIA_BUCKET: ${MINIO_MEDIA_BUCKET}
      MINIO_BIDS_EXPORTS_BUCKET: ${MINIO_BIDS_EXPORTS_BUCKET}
      EXPORT_DATA_PATH: /export_data
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging: *common-logging

  erp_neuro_marketing:
    build:
      context: .
      dockerfile: docker/Dockerfile.python
      args:
        SERVICE_NAME: erp_neuro_marketing
    container_name: eeg_erp_neuro_marketing
    restart: unless-stopped
    command: uvicorn src.main:app --host 0.0.0.0 --port 8001
    depends_on:
      db:
        condition: service_healthy
      auth_manager:
        condition: service_started
      bids_exporter:
        condition: service_started
    ports:
      - '${ERP_SERVICE_PORT}:8001'
    volumes:
      - bids_exports_volume:/export_data
    environment:
      <<: *postgres-env
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      BIDS_EXPORTER_URL: http://bids_exporter:8000
      AUTH_MANAGER_URL: http://auth_manager:3000
      SHARED_VOLUME_PATH: /export_data
    networks:
      - eeg-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8001/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
    logging: *common-logging

volumes:
  pg_data:
  minio_data:
  bids_exports_volume:

networks:
  eeg-network:
    driver: bridge
