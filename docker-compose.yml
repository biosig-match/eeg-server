services:
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: eeg_rabbitmq
    ports:
      - '${RABBITMQ_MGMT_PORT}:15672'
      - '5672:5672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eeg-network

  db:
    image: timescale/timescaledb-ha:pg16-ts2.14
    container_name: eeg_db
    ports:
      - '5432:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - eeg-network

  minio:
    image: minio/minio
    container_name: eeg_minio
    ports:
      - '${MINIO_PORT}:9000'
      - '${MINIO_CONSOLE_PORT}:9001'
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    networks:
      - eeg-network

  create-buckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set local http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}; do
        echo '... waiting for minio to be ready ...' && sleep 2;
      done;
      echo '✅ MinIO is ready. Alias set.';
      /usr/bin/mc mb local/${MINIO_RAW_DATA_BUCKET} --ignore-existing;
      /usr/bin/mc mb local/${MINIO_MEDIA_BUCKET} --ignore-existing;
      echo '✅ Buckets are created.';
      exit 0;
      "
    networks:
      - eeg-network

  collector:
    build: ./collector
    container_name: eeg_collector
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - eeg-network

  processor:
    build: ./processor
    restart: unless-stopped
    depends_on:
      create-buckets:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_USE_SSL=false
      - MINIO_RAW_DATA_BUCKET=${MINIO_RAW_DATA_BUCKET}
    networks:
      - eeg-network

  media_processor:
    build: ./media_processor
    restart: unless-stopped
    depends_on:
      create-buckets:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_USE_SSL=false
      - MINIO_MEDIA_BUCKET=${MINIO_MEDIA_BUCKET}
    networks:
      - eeg-network

  realtime_analyzer:
    build: ./realtime_analyzer
    container_name: eeg_realtime_analyzer
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - eeg-network

  ingress:
    build: ./nginx
    container_name: eeg_ingress
    restart: unless-stopped
    ports:
      - '${NGINX_PORT}:80'
    depends_on:
      - collector
      - realtime_analyzer
    networks:
      - eeg-network

volumes:
  pg_data:
  minio_data:

networks:
  eeg-network:
    driver: bridge
