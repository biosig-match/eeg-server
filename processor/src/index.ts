import amqp, { Channel, Connection, ConsumeMessage } from 'amqplib';
import { Client as MinioClient } from 'minio';
import { Pool } from 'pg';
import { init as zstdInit, decompress as zstdDecompress } from '@bokuweb/zstd-wasm';
import { v4 as uuidv4 } from 'uuid';

const RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqp://guest:guest@rabbitmq';
const DATABASE_URL = process.env.DATABASE_URL || 'postgres://admin:password@db:5432/eeg_data';
const MINIO_ENDPOINT = process.env.MINIO_ENDPOINT || 'minio';
const MINIO_PORT = parseInt(process.env.MINIO_PORT || '9000', 10);
const MINIO_ACCESS_KEY = process.env.MINIO_ACCESS_KEY || 'minioadmin';
const MINIO_SECRET_KEY = process.env.MINIO_SECRET_KEY || 'minioadmin';
const MINIO_USE_SSL = process.env.MINIO_USE_SSL === 'true';
const MINIO_RAW_DATA_BUCKET = process.env.MINIO_RAW_DATA_BUCKET || 'raw-data';

const RAW_DATA_EXCHANGE = 'raw_data_exchange';
const PROCESSING_QUEUE = 'processing_queue';

// --- „Éá„Éº„ÇøÊßãÈÄ†„ÅÆÂÆöÊï∞ ---
const HEADER_SIZE = 18; // sizeof(PacketHeader)
const POINT_SIZE = 53; // sizeof(SensorData)

// --- „Ç∞„É≠„Éº„Éê„É´„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Å®Áä∂ÊÖã ---
let amqpConnection: Connection | null = null;
let amqpChannel: Channel | null = null;
const pgPool = new Pool({ connectionString: DATABASE_URL });
const minioClient = new MinioClient({
  endPoint: MINIO_ENDPOINT,
  port: MINIO_PORT,
  useSSL: MINIO_USE_SSL,
  accessKey: MINIO_ACCESS_KEY,
  secretKey: MINIO_SECRET_KEY,
});

/**
 * ‰º∏Èï∑„Åï„Çå„Åü„Éá„Éº„Çø„Éë„Ç±„ÉÉ„Éà„Åã„Çâ„É°„Çø„Éá„Éº„Çø„ÇíËß£Êûê„Åô„Çã„É≠„Ç∏„ÉÉ„ÇØ
 */
function extractMetadataFromPacket(decompressedData: Buffer): {
  deviceId: string;
  startTime: number; // 32-bit integer
  endTime: number; // 32-bit integer
} {
  if (decompressedData.length < HEADER_SIZE + POINT_SIZE) {
    throw new Error('„Éá„Éº„Çø„Åå„Éò„ÉÉ„ÉÄ„Éº„Å®ÊúÄ‰Ωé1„Å§„ÅÆ„Éá„Éº„Çø„Éù„Ç§„É≥„Éà„ÇíÂê´„ÇÄ„Å´„ÅØÁü≠„Åô„Åé„Åæ„Åô„ÄÇ');
  }

  // 1. deviceId„ÅÆÊäΩÂá∫ (PacketHeader„Åã„Çâ)
  const headerBuffer = decompressedData.slice(0, HEADER_SIZE);
  const nullTerminatorIndex = headerBuffer.indexOf(0);
  const deviceId = headerBuffer.toString(
    'ascii',
    0,
    nullTerminatorIndex !== -1 ? nullTerminatorIndex : undefined,
  );

  // 2. „Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅÆÊäΩÂá∫ (SensorData„Åã„Çâ)
  const pointsBuffer = decompressedData.slice(HEADER_SIZE);
  const numPoints = Math.floor(pointsBuffer.length / POINT_SIZE);

  if (numPoints <= 0) {
    throw new Error('„Éë„Ç±„ÉÉ„Éà„Å´ÊúâÂäπ„Å™„Éá„Éº„Çø„Éù„Ç§„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
  }

  const timestampOffsetInPoint = 49;

  const startTime = pointsBuffer.readUInt32LE(timestampOffsetInPoint);

  const lastPointOffset = (numPoints - 1) * POINT_SIZE;
  const endTime = pointsBuffer.readUInt32LE(lastPointOffset + timestampOffsetInPoint);

  return { deviceId, startTime, endTime };
}

/**
 * „É°„Ç§„É≥„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ„É≠„Ç∏„ÉÉ„ÇØ
 */
async function processMessage(msg: ConsumeMessage | null) {
  if (!msg) return;

  try {
    const compressedPayload = msg.content;
    const userId = msg.properties?.headers?.user_id?.toString();

    if (!userId) {
      console.warn('user_id„Éò„ÉÉ„ÉÄ„Éº„Å™„Åó„Åß„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü„ÄÇACK„ÇíÈÄÅ‰ø°„Åó„Å¶Á†¥Ê£Ñ„Åó„Åæ„Åô„ÄÇ');
      amqpChannel?.ack(msg);
      return;
    }

    // ‰º∏Èï∑Âá¶ÁêÜ
    const decompressedData = zstdDecompress(compressedPayload);

    const { deviceId, startTime, endTime } = extractMetadataFromPacket(
      Buffer.from(decompressedData),
    );

    // MinIOÁî®„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàID„ÇíÁîüÊàê
    const objectId = `raw/${userId}/start_tick=${startTime}/end_tick=${endTime}_${uuidv4()}.zst`;

    // 1. ÂÖÉ„ÅÆÂúßÁ∏Æ„Éá„Éº„Çø„ÇíMinIO„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    const metaData = {
      'Content-Type': 'application/octet-stream',
      'Content-Encoding': 'zstd',
      'X-User-Id': userId,
      'X-Device-Id': deviceId,
    };
    await minioClient.putObject(
      MINIO_RAW_DATA_BUCKET,
      objectId,
      compressedPayload,
      compressedPayload.length,
      metaData,
    );
    console.log(`[MinIO] „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü: ${objectId}`);

    // 2. „É°„Çø„Éá„Éº„Çø„ÇíPostgreSQL„Å´ÊåøÂÖ•
    const query = `
      INSERT INTO raw_data_objects (object_id, user_id, device_id, start_time_device, end_time_device)
      VALUES ($1, $2, $3, $4, $5)
      ON CONFLICT (object_id) DO NOTHING;
    `;
    await pgPool.query(query, [objectId, userId, deviceId, startTime, endTime]);
    console.log(`[PostgreSQL] „É°„Çø„Éá„Éº„ÇøÊåøÂÖ•ÊàêÂäü: ${objectId}`);

    // 3. „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆACK„ÇíÈÄÅ‰ø°
    amqpChannel?.ack(msg);
  } catch (error: any) {
    console.error('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    amqpChannel?.nack(msg, false, false);
  }
}

async function startConsumer() {
  console.log('[RabbitMQ] Êé•Á∂ö‰∏≠...');
  amqpConnection = await amqp.connect(RABBITMQ_URL);
  amqpChannel = await amqpConnection.createChannel();
  console.log('‚úÖ [RabbitMQ] Êé•Á∂ö„Åó„ÄÅ„ÉÅ„É£„Éç„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ');

  await amqpChannel.assertExchange(RAW_DATA_EXCHANGE, 'fanout', { durable: true });
  await amqpChannel.assertQueue(PROCESSING_QUEUE, { durable: true });
  await amqpChannel.bindQueue(PROCESSING_QUEUE, RAW_DATA_EXCHANGE, '');

  amqpChannel.prefetch(1);

  console.log(`üöÄ „Éó„É≠„Çª„ÉÉ„Çµ„Éº„Çµ„Éº„Éì„Çπ„Åå„Ç≠„É•„Éº„Åß„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂæÖÊ©ü‰∏≠: "${PROCESSING_QUEUE}"`);
  amqpChannel.consume(PROCESSING_QUEUE, processMessage);
}

async function ensureMinioBucket() {
  const bucketExists = await minioClient.bucketExists(MINIO_RAW_DATA_BUCKET);
  if (!bucketExists) {
    console.log(`[MinIO] „Éê„Ç±„ÉÉ„Éà "${MINIO_RAW_DATA_BUCKET}" „ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ‰ΩúÊàê„Åó„Åæ„Åô...`);
    await minioClient.makeBucket(MINIO_RAW_DATA_BUCKET);
    console.log(`‚úÖ [MinIO] „Éê„Ç±„ÉÉ„Éà "${MINIO_RAW_DATA_BUCKET}" „Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ`);
  } else {
    console.log(`‚úÖ [MinIO] „Éê„Ç±„ÉÉ„Éà "${MINIO_RAW_DATA_BUCKET}" „ÅØ„Åô„Åß„Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇ`);
  }
}

async function main() {
  try {
    await zstdInit();
    console.log('‚úÖ [ZSTD] WASM„É¢„Ç∏„É•„Éº„É´„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü„ÄÇ');

    await ensureMinioBucket();
    await startConsumer();
  } catch (error) {
    console.error('‚ùå „Éó„É≠„Çª„ÉÉ„Çµ„Éº„Çµ„Éº„Éì„Çπ„ÅÆËµ∑Âãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
    process.exit(1);
  }
}

main();
