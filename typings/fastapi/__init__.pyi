from collections.abc import Callable
from typing import Any

class BackgroundTasks:
    def add_task(self, func: Callable[..., Any], *args: Any, **kwargs: Any) -> None: ...

class FastAPI:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def on_event(self, event_type: str) -> Callable[..., Any]: ...
    def get(self, *args: Any, **kwargs: Any) -> Callable[..., Any]: ...
    def post(self, *args: Any, **kwargs: Any) -> Callable[..., Any]: ...
    def not_found(self, handler: Callable[..., Any]) -> None: ...
    def on_error(self, handler: Callable[..., Any]) -> None: ...

class HTTPException(Exception):
    status_code: int
    detail: Any
    def __init__(self, status_code: int, detail: Any = ..., *, cause: Any | None = ...) -> None: ...
    def get_response(self) -> Any: ...

class Response:
    status_code: int
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

def Depends(dependency: Callable[..., Any] | None = ..., *, use_cache: bool = ...) -> Any: ...

def Header(default: Any = ..., *, alias: str | None = ...) -> Any: ...
